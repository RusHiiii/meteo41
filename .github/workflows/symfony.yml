name: Full CI process for Symfony
on:
    push:
    pull_request:
        branches:
            - master
jobs:
    symfony:
        name: Meteo41 - CI
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:11.5
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: ~
                    POSTGRES_DB: postgres
                    TZ: "Europe/Paris"
                ports:
                    - 5432/tcp
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        strategy:
            fail-fast: true
            matrix:
                php-versions: ['7.4']
        steps:
            # —— Setup
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup PHP, extensions and composer
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: xml, ctype, intl, filter, json, mbstring, pdo, xdebug
                  tools: composer:v1
                  coverage: xdebug
                  ini-values: date.timezone=Europe/Paris
              env:
                  update: true

            # —— Composer
            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: composer install

            # —— Symfony
            - name: Check Symfony requirements
              run: vendor/bin/requirements-checker

            - name: Create DB
              run: |
                psql -c 'create database meteo41_test;' -U postgres -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }}

            - name: Database migration
              run: |
                 bin/console doctrine:migration:migrate --no-interaction --env=test
                 bin/console doctrine:schema:validate --env=test
              env:
                DATABASE_URL: pgsql://postgres:@127.0.0.1:${{ job.services.postgres.ports[5432] }}/meteo41_test?charset=UTF-8

            # —— Test
            - name: Execute functionnal tests
              run: |
                vendor/bin/behat --format=progress
              env:
                APP_ENV: test
                DATABASE_URL: pgsql://postgres:postgres@127.0.0.1:${{ job.services.postgres.ports[5432] }}/meteo41_test?charset=UTF-8

            - name: Execute integration tests
              run: bin/phpunit --testdox
              env:
                APP_ENV: test
                DATABASE_URL: pgsql://postgres:postgres@127.0.0.1:${{ job.services.postgres.ports[5432] }}/meteo41_test?charset=UTF-8

            # —— Coding standards
            - name: Coding standards checks with PHPStan
              run: vendor/bin/phpstan analyse -l 4 src

            - name: Coding standards checks with PHPCS
              run: vendor/bin/phpcs --warning-severity=0 --standard=PSR12 src/

            - name: Run infection
              run: vendor/bin/infection --min-msi=60 --threads=4
              env:
                APP_ENV: test
                DATABASE_URL: pgsql://postgres:postgres@127.0.0.1:${{ job.services.postgres.ports[5432] }}/meteo41_test?charset=UTF-8